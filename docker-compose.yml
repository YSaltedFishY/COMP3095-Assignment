#updates with every new container-all the containers

#docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d --build
# start containers in detached mode
#docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d --build
#version: '3.9'

#to add order-service, have to create integration tests by yourelf

services:
  #run text file that instantiates images
  postgres-room:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-room
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    #docker-compose -p postgres-inventory-single -f docker-compose-multiple.yml up -d
    #no network bc local
  postgres-user:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-user
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/user:/var/lib/postgresql/data
      - ./init/user/init.sql:/docker-entrypoint-initdb.d/init.sql
  #GUI
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-room
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password


  # Mongo Express for MongoDB 1
  mongo-express-booking:
    image: mongo-express:latest
    container_name: mongo-express-booking
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=bookingservice-mongodb
    depends_on:
      - bookingservice-mongodb
  #2
  mongo-express-event:
    image: mongo-express:latest
    container_name: mongo-express-event
    ports:
      - "8089:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=eventservice-mongodb
    depends_on:
      - eventservice-mongodb

  #mongodb containers
  bookingservice-mongodb:
    image: mongo
    container_name: bookingservice-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_DATABASE: booking-service
      MONGO_INITDB_ROOT_USERNAME: admin  # Set the root username
      MONGO_INITDB_ROOT_PASSWORD: password  # Set the root password
    command: mongod --auth
    volumes:
      - ./data/booking:/data/db  # Volume for persistent data storage
  eventservice-mongodb:
    image: mongo
    container_name: eventservice-mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_DATABASE: event-service
      MONGO_INITDB_ROOT_USERNAME: admin  # Set the root username
      MONGO_INITDB_ROOT_PASSWORD: password  # Set the root password
    command: mongod --auth
    volumes:
      - ./data/event:/data/db  # Volume for persistent data storage

volumes:
  postgres:
    driver: local # use local driver to persist data on the host
networks:
  spring:
    driver: bridge # bridge allows isolated communication between containers
