#updates with every new container-all the containers

#docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d --build
# start containers in detached mode
#docker-compose -p comp3095-microservices-ecommerce -f docker-compose-single.yml up -d --build
#version: '3.9'

#to add order-service, have to create integration tests by yourelf

services:
  #run text file that instantiates images
  postgres-room:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-room
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres-room-services
    volumes:
      - ./data/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    #docker-compose -p postgres-inventory-single -f docker-compose-multiple.yml up -d
    #no network bc local
  postgres-user:
    image: postgres
    ports:
      - "5434:5432"
    container_name: postgres-user
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres-user-services
    volumes:
      - ./data/user:/var/lib/postgresql/data
      - ./init/user/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-approval:
    image: postgres
    ports:
      - "5435:5432"
    container_name: postgres-approval
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres-approval-services
    volumes:
      - ./data/approval:/var/lib/postgresql/data
      - ./init/approval/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-event:
    image: postgres
    ports:
      - "5436:5432"
    container_name: postgres-event
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres-approval-services
    volumes:
      - ./data/event:/var/lib/postgresql/data
      - ./init/event/init.sql:/docker-entrypoint-initdb.d/init.sql

  postgres-booking:
    image: postgres
    ports:
      - "5437:5432"
    container_name: postgres-booking
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres-booking-services
    volumes:
      - ./data/booking:/var/lib/postgresql/data
      - ./init/booking/init.sql:/docker-entrypoint-initdb.d/init.sql
  #GUI
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-inter-service
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
  bookingservice-mongodb:
    image: mongo
    container_name: bookingservice-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_DATABASE: booking-service
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    command: mongod --auth
    volumes:
      - ./data/booking:/data/db

  #GUI for mongo
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=bookingservice-mongodb

  booking-service:
    image: booking-service
    ports:
      - "8080:8080"
    build:
      context: ./BookingService
      dockerfile: ./Dockerfile
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - bookingservice-mongodb
    networks:
      - spring

volumes:
  postgres:
    driver: local
  mongodb-data:
networks:
  spring:
    driver: bridge
