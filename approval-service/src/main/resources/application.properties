spring.application.name=approval-service
approval-service.version=v1.0

server.port=8085

spring.datasource.url=jdbc:postgresql://localhost:5434/approval-service

#Postgres Configuration
spring.datasource.username=admin
spring.datasource.password=password
#postgresql.Driver will connect to postgres dbs
spring.datasource.driver-class-name=org.postgresql.Driver
#picks the version/dialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#hibernate creates actual db - and columns.tables
#none bc complete config is in flyway
spring.jpa.hibernate.ddl-auto=none

user.service.url=http://localhost:8083
event.service.url=http://localhost:8084

springdoc.swagger-ui.path=/swagger-ui
springdoc.api-docs.path=/api-docs

#Kafka Consumer Properties (don't change)
#The address of the Kafka broker used to connect to the Kafka cluster
spring.kafka.bootstrap-servers=localhost:9092
#The unique identifier for the consumer group to which this consumer belongs
spring.kafka.consumer.group-id=approval-service
# The deserializer class used for deserializing the key of the messages from Kafka
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# The deserializer class used for deserializing the value of the messages from Kafka in JSON format.
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Maps a custom event type to a specific class for deserialization of incoming JSON messages.
spring.kafka.consumer.properties.spring.json.type.mapping=event:ca.gbc.approvalservice.event.EventMadeEvent
# will ensure your consumer starts processing all unprocessed events from the beginning of the topic
spring.kafka.consumer.auto-offset-reset=earliest
#Kafka Consumer Properties (don't change)

#Resilience4J
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#User CB
resilience4j.circuitbreaker.instances.user.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.user.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.user.slidingWindowType=count_based
resilience4j.circuitbreaker.instances.user.slidingWindowSize=10
resilience4j.circuitbreaker.instances.user.failureRateThreshold=50
resilience4j.circuitbreaker.instances.user.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.user.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.user.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.user.timeout-duration=3s
resilience4j.circuitbreaker.instances.user.minimum-number-of-calls=5
resilience4j.retry.instances.user.max-attempts=3
resilience4j.retry.instances.user.wait-duration=2s

#Event CB
resilience4j.circuitbreaker.instances.event.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.event.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.event.slidingWindowType=count_based
resilience4j.circuitbreaker.instances.event.slidingWindowSize=10
resilience4j.circuitbreaker.instances.event.failureRateThreshold=50
resilience4j.circuitbreaker.instances.event.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.event.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.event.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.event.timeout-duration=3s
resilience4j.circuitbreaker.instances.event.minimum-number-of-calls=5
resilience4j.retry.instances.event.max-attempts=3
resilience4j.retry.instances.event.wait-duration=2s